<div id="top-container" class="covering-main-page">
	<div id="global-header">
        <div class="global-bar">
             <nav role="navigation">                 
                 <h1 class="logo">
                     <a href="/"><img src="/assets/RORD_logo.png" width="350" height="30" data-retina /></a>
                 </h1>                 
                 <ul id="global-navigation" class="main" role="navigation">
					<li><%= link_to 'Projects', projects_path %></li>
					<li><%= link_to 'About', about_path %></li>
				  <% if user_signed_in? %>
						<% if current_user.has_role? :admin %>
							<li><%= link_to 'Experience', posts_path %></li>					
					    <% end %>
					<li><%= link_to current_user.email, edit_user_registration_path %></li>
				  <% else %>
					<li><%= link_to 'Login', new_user_session_path %></li>
				  <% end %>	
                 </ul>                
             </nav>
         </div>
     </div>
	<div id="feature-area">
		<%= link_to 'Make Contact', contact_path, :class => "float-right action-button", :style => "margin-top: 6px;" %>
		<h1>Focused on Innovative Solutions</h1>
	</div>	
</div>



<div id="container">
	<div class="main-page" id="blog-page">
		<div class="content flush-padding">
			<div class="columns">
				<div class="cell width-8 first vertical-gap">
					<div class="blog-posts ">

<article>
<hgroup>
	<header>February 26, 2013</header>

<h2>Creating a JSONp server to authenticate and exchange data through Phone Gap</h2>
	<footer>By Andy</footer>
</hgroup>
<div class="entry-content rich-content">
<p>There are a few gotchas, but overall its a good solution</p>

<h4>Setup a Ruby gemset and a specific version of Rails:
</h4>
<pre>


Follow this to setup server:
<%= link_to 'rails/device/json', 'http://lucatironi.github.com/tutorial/2012/10/15/ruby_rails_android_app_authentication_devise_tutorial_part_one/' %>

the add the following for Jsonp middleware support
in config/application.rb
require "/Users/andydenenberg/Documents/rails/json_auth/lib/rack/restful_jsonp_middleware.rb"
and
config.middleware.swap(Rack::MethodOverride,Rack::RestfulJsonpMiddleware)

# restful_jsonp_middleware.rb
module Rack
  # Allows overwriting of HTTP method also in
  # GET HTTP requests in order to allow
  # RESTful JSONP calls
  class RestfulJsonpMiddleware

    HTTP_METHODS = %w(GET HEAD PUT POST DELETE OPTIONS)
    METHOD_OVERRIDE_PARAM_KEY = "_method".freeze
    HTTP_METHOD_OVERRIDE_HEADER = "HTTP_X_HTTP_METHOD_OVERRIDE".freeze

    attr_accessor :method_parameter_name

    def initialize(app)
      @app = app
      @method_parameter_name = METHOD_OVERRIDE_PARAM_KEY
    end

    # We check if the method parameter is in the request
    # and set up the request to allow the execution of the
    # overwritten HTTP method
    def call(env)
      req = Request.new(env)
      method = req.params[@method_parameter_name]
      method = method.to_s.upcase
      if HTTP_METHODS.include?(method)
        env["rack.methodoverride.original_method"] = env["REQUEST_METHOD"]
        env["REQUEST_METHOD"] = method
        env[HTTP_METHOD_OVERRIDE_HEADER] = method
      end
      @app.call(env)
    end
  end
end
</pre>
<p>Next note will be setting up the javascript for Phonegap...
	http://docs.phonegap.com/en/2.3.0/guide_getting-started_ios_index.md.html#Getting%20Started%20with%20iOS
</p>
</div>
</article>



<article>
<hgroup>
	<header>February 25, 2013</header>

<h2>Using RVM Gemset to run older ROR environment</h2>
	<footer>By Andy</footer>
</hgroup>
<div class="entry-content rich-content">
<p>I recently had to do make some changes on an older rails app running Ruby 1.8.7 and Rails 3.0.9.  Rather than upgrade the environment I setup a gemset to run the older app and test the changes before rolling them out.</p>

<h4>Setup a Ruby gemset and a specific version of Rails:
</h4>
<pre>
1. Check to make sure the ruby version is installed
ubuntu:~/rails$ rvm list

rvm rubies

=> ruby-1.8.7-p370 [ i686 ]
 * ruby-1.9.3-p194 [ i686 ]

# => - current
# =* - current && default
#  * - default

2. Select the ruby version 
ubuntu:~/rails$ rvm 1.8.7

3. Create a gemset using a descriptive name
ubuntu:~/rails$ rvm gemset create 309
'309' gemset created (/home/andy/.rvm/gems/ruby-1.8.7-p370@309).

4. Select the gemset
ubuntu:~/rails$ rvm ruby-1.8.7-p370@309

5. Install the desired version of rails
ubuntu:~/rails$ gem install rails -v 3.0.9 --no-rdoc --no-ri

6. Verify the rails version is loaded
ubuntu:~/rails$ rails -v

7. Setup the rails app to run the correct gemset
ubuntu:~/rails$  rvm use ruby-1.8.7-p370@300

PS: Want to delete the gemset and start over?
ubuntu:~/rails$ rvm gemset delete 300

</pre>
<p>PSS: Want to create another version of rails with same ruby?  Create a new gemset and then install new rails...
</p>
</div>
</article>
						

<article>
<hgroup>
	<header>February 21, 2013</header>

<h2>Installing Wordpress on Ubuntu 12.04 with Apache2</h2>
	<footer>By Andy</footer>
</hgroup>
<div class="entry-content rich-content">
<p>After working with Wordpress to modify the contents on the Standtall Campaign Site and then working with RefineryCMS, I decided to install Wordpress and give it a whirl.</p>

<h4>Simple instructions:</h4>
<pre><a href="https://www.digitalocean.com/community/articles/how-to-install-wordpress-on-ubuntu-12-04" target="_blank">here...</a>
</pre>
<p>Check out a very elegant theme - The Journalist template by <a href='http://lucianmarin.com/page/themes'>Lucian E. Marin â€” Built for WordPress</a></p>
</div>
</article>


<article>
<hgroup>
	<header>February 21, 2013</header>

<h2>Deploying Rails 3.2.11 on Ubuntu with Capistrano</h2>
	<footer>By Andy</footer>
</hgroup>
<div class="entry-content rich-content">
<p>Its simple and works well but there are a few caveats to be careful of:</p>

<h4>Add Capistrano to Project Gemfile:</h4>
<pre>
gem 'capistrano'
gem 'rvm-capistrano' # required for capistrano to run rake tasks in project
</pre>

<h4>Install Capistrano and tell it to create the initial script</h4>
<pre>
dev$ bundle install
dev$ cd my_project
dev$ capify .
</pre>

<h4>Edit config/deploy.rb to include the following:</h4>
<pre>
require "bundler/capistrano"
require "rvm/capistrano" # required so that capistrano can run project rake tasks

set :application, "Ftv4"
set :repository,  "git@github.com:andydenenberg/ftv4.git"
set :deploy_to, "/var/www/ftv4"
set :user, "ubuntu"
set :keep_releases, 5
set :normalize_asset_timestamps, false  # 

role :web, "107.20.214.190"  # Your HTTP server, Apache/etc
role :app, "107.20.214.190"  # This may be the same as your `Web` server
role :db,  "107.20.214.190", :primary => true # This is where Rails migrations will run

after "deploy", "deploy:symlink_db", "deploy:precompile_assets"

namespace :deploy do
  desc "Symlinks the database.yml"
  task :symlink_db, :roles => :app do
    run "ln -nfs #{deploy_to}/shared/database.yml #{release_path}/config/database.yml"
  end

  desc "Precompile Assets"
  task :precompile_assets, :roles => :app do
# run "/bin/bash -l -c 'cd #{release_path} && RAILS_ENV=production rake assets:precompile'"
  run "cd #{release_path}; RAILS_ENV=production rake assets:precompile"
  end
end

desc "tail production log files" 
task :tail_logs, :roles => :app do
  run "tail -f #{shared_path}/log/production.log" do |channel, stream, data|
    puts  # for an extra line break before the host name
    puts "#{channel[:host]}: #{data}" 
    break if stream == :err    
  end
end

# if you want to clean up old releases on each deploy uncomment this:
 after "deploy:restart", "deploy:cleanup"
</pre>

<h4>Tell Capistrano to setup the server for deployment</h4>
<pre>dev$ cap deploy:setup
</pre>

<h4>Capistrano will create the base directory, but its is owned by root. Change the directory and its subs to be owned by ubuntu.</h4>  
<pre>server$ /var/www$ sudo chown -R ubuntu ftv4
</pre>

<h4>Database.yml should be in .gitignore so that individual versions can be seperately managed on dev and server.</h4><br>
<h4>Place the server database.yml in the shared folder of the base directory. Capistrano will set a symlink to it for each release that is pulled down to the server.</h4>
<pre>
dev$ scp config/database.yml.server ubuntu@107.20.214.190:/var/www/ftv4/shared/database.yml
</pre>

<h4>Deploy the release to the server</h4>
<pre>cap deploy
</pre>

</div>
</article>



<article>
<hgroup>
	<header>February 2, 2013</header>
	
<h2>Create a new Rails app with Rspec</h2>
	<footer>By Andy</footer>
</hgroup>
<div class="entry-content rich-content">

<p>Getting setup with a basic configration</p>

<h4>at command line:</h4>
<pre>rails new MYAPP -T # The -T option tells rails not to include Test::Unit</pre>
<h4>in Gemfile:</h4>
<pre><code>gem 'rspec-rails'</code></pre>
<h4>in config/initializers/generator.rb</h4>
<pre>Rails.application.config.generators do |g|
  g.test_framework = :rspec
end</pre>
<h4>at command line:</h4>
<pre>bundle install
rails g rspec:install</pre>
</pre>

</div>
</article>


<article>
<hgroup>
	<header>January 28, 2013</header>
	
<h2>Scheduling Rake tasks using Crontab on Ubuntu</h2>
	<footer>By Andy</footer>
</hgroup>
<div class="entry-content rich-content">

<p>The trick to getting it to work is making sure that the path to RVM Gems is set properly</p>

<pre>
gem 'whenever', :require => false
</pre>

<h4>Edit the system crontab</h4>
<pre>chrontab -e
</pre>

<h4>Log Format</h4>
<pre>
# minute (0-59), hour (0-23, 0 = midnight), day (1-31), month (1-12), weekday (0-6, 0 = Sunday), command

0 22 * * * /bin/bash -l -c 'cd ~/rails/nvestr && RAILS_ENV=production bundle exec rake demo:daily_snapshot --silent >> /var/logs/my_app.log 2>> /var/logs/my_err.log'

</pre>

<h4>Rake Task</h4>
<pre>namespace :update do
	desc "Update log with daily results"
	task :daily_snapshot => :environment do
		Translog.daily_snapshot
    end
end
</pre>

<h4>The ruby code to mix-in</h4>
<pre>module  Translog 

def self.daily_snapshot
	ss = Portfolio.family_rank
	text = 'Daily Snapshot: '
	text += ss.collect { |p| User.find(p[0]).name + ' = ' + p[1].to_s + ', ' }.join
	PostLogger.debug(text)
end
</pre>

</div>
</article>




<article>
<hgroup>
	<header>January 10, 2013</header>
	
<h2>Download Database and User Created Content</h2>
	<footer>By Andy</footer>
</hgroup>
<div class="entry-content rich-content">
<p>Here is a rake task that downloads a production database and user created (uploaded) content:</p>

<p>Production Server URL: www.example.com</p>

<pre>
require "net/ssh"
require "net/scp"

namespace :sync do
  desc "Copy production database to local development directory"
  task :from_prod => :environment do
	url = 'www.example.com
    puts "** DANGER ** You are about to replace your database and public/system folder"
    t = Time.now
    db_dump_file_name = "dumpfile#{t.to_i}.sql"
    tar_name = "#{t.to_i}.tar.gz"
    tmp_system = "/tmp/#{tar_name}"

    Net::SSH.start(url, 'ubuntu') do |ssh|
      puts "Dumping database remotely into /tmp/#{db_dump_file_name}"
      ssh.exec! "mysqldump -u root -h localhost stc > /tmp/#{db_dump_file_name}"
      puts 'db dump complete'
      puts "tar czvf #{tmp_system} public/system"
      ssh.exec! "tar czvf #{tmp_system} --directory ~/rails/stc/public/ system"
    end

    FileUtils.rm_rf tmp_system if File.exists? tmp_system
    Net::SCP.start(url, 'ubuntu') do |scp|
      puts "Downloading database to your /tmp."
      scp.download("/tmp/#{db_dump_file_name}", "/tmp")
      puts "Downloading system tar gz folder to your /tmp."
      scp.download(tmp_system, "/tmp")
    end

    Net::SSH.start(url, 'ubuntu') do |ssh|
      puts "Removing remote database dump"
      ssh.exec! "rm -f /tmp/#{db_dump_file_name}"
      puts "Removing remote tar gz file"
      ssh.exec! "rm -f #{tmp_system}"
    end

    puts "Uncompressing system tar gz."
    `tar xzvf /tmp/#{tar_name} --directory public/system`    
    puts "Loading database (The dump file remains in /tmp)"
    `mysql -u root -h localhost stc < /tmp/#{db_dump_file_name}`

  end

end

</pre>

</div>
</article>



<article>
<hgroup>
	<header>November 20, 2012</header>
	
<h2>Organizing Pipeline Assets</h2>
	<footer>By Andy</footer>
</hgroup>
<div class="entry-content rich-content">

<p>What you want to do is use separate manifest files to break things up. First you have to re-organize your app/assets/stylesheets folder:</p>

<pre>

app/assets/stylesheets
+-- all
    +-- your_base_stylesheet.css
+-- print
    +-- blueprint
        +-- print.css
    +-- your_print_stylesheet.css
+-- ie
    +-- blueprint
        + ie.css
    +-- your_ie_hacks.css
+-- application-all.css
+-- application-print.css
+-- application-ie.css
Then you edit the three manifest files:

/**
 * application-all.css
 *
 *= require_self
 *= require_tree ./all
 */

/**
 * application-print.css
 *
 *= require_self
 *= require_tree ./print
 */

/**
 * application-ie.css
 *
 *= require_self
 *= require_tree ./ie
 */
Next you update your application layout file:

< %= stylesheet_link_tag "application-all", :media => "all" %>
< %= stylesheet_link_tag "application-print", :media => "print" %>

< !--[if lte IE 8]>
    < %= stylesheet_link_tag "application-ie", :media => "all" %>
<! [endif]-->
Lastly, don't forget to include these new manifest files in your config/environments/production.rb:

config.assets.precompile += %w( application-all.css application-print.css application-ie.css )

</pre>

</div>
</article>

<article id="post-2850" class="post-2850 post type-post status-publish format-standard hentry category-awesome category-monotouch category-news">
<hgroup>
	
	<header>August 2, 2012</header>
	
<h2>Create a Hosted Cloud Solution in 10 steps</h2>
	<footer>By Andy</footer>
</hgroup>
<div class="entry-content rich-content">
<p>Very simple and lightweight.  Here's a quick Rails example using scaffolding, github and Heroku.</p>

<pre>
1. Create the basic rails app
	- rails new new_app
2. Create a TextMate project for new_app
	- mate new_app
3. Generate the scaffold with simple data fields
	- rails g scafold emp name:string age:integer salary:decimal
4. Run Migration
	- rake db:migrate
5. Delete the public/index.html
6. Update routes
	- set root to emp#index
7. Install the bundle of gems
	- bundle install
8. Test locally
	- rails s
9. Prepare database for PG on Heroku
	- add to following to gemfile

	group :production do
	gem 'pg'
	end
	group :development, :test do
	gem 'sqlite3'
	end

10. Create a git repo

	git init
	git add .
	git commit -a -m "whatever comments"
	git remote add origin git@github.com:andydenenberg/ajax_hw.git
	git push origin master

11. Push up to Heroku

	heroku create
	heroku rename appname
	git push heroku master
	heroku rake db:migrate

12. heroku open - Thats it!
</pre>

</div>
</article>





																						<div class="navigation">
									<div class="nav-previous"><a href="#" ><span class="meta-nav">&larr;</span> Older posts</a></div>
									<div class="nav-next"></div>
								</div>
					</div>
				</div>
				<div class="blog-sidebar cell width-4 append-gutter vertical-gap" >
					<div id="secondary" class="widget-area" role="complementary">
						
<aside class="widget s2_form_widget"><form method="get" action="#">
<%= text_field_tag 'search', "Search" %>
</form>
</aside>

<% if @user %>
<aside class="widget s2_form_widget"><h3 class="widget-title">Subscribe</h3><div class="search">
	  <%= form_tag make_contact_path do %>
	  <%= hidden_field_tag :name %>
	  <%= text_field_tag :email, nil, :required => true, :placeholder => "Enter email address..."  %>
	  <%= hidden_field_tag :message, 'Signed-up at railsdevev.denenberg.net' %>
	  <%= submit_tag 'Submit', :class => 'btn btn-small' %>
	  <% end %>
</aside>
<% end %>


<aside id="linkcat-2" class="widget widget_links"><h3 class="widget-title">Links</h3>
	<ul class='xoxo blogroll'>
<li><%= link_to 'Rails Guide', 'http://guides.rubyonrails.org/'%>
<li><%= link_to 'Family Site', 'http://www.denenberg.net'%></li>
	</ul>
</aside>
</div>
				</div>
			</div>
		</div>
	</div>
